# -*- coding: utf-8 -*-
"""FinishedProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W561mRjlHxygwf6DRLHCS_bnmctO1HOO
"""

!pip install mysql-connector-python
!pip install PyMySQL

import mysql.connector
from mysql.connector import Error  # Import the Error class
import pandas as pd
config = {
    'user': 'root',
    'password': 'T%%ZI<#e7qh2=8HH',
    'host': '34.30.157.44',
    'database': 'customer_segmentation',
}

connection = None  # Initialize connection variable

try :
    connection = mysql.connector.connect(**config)
    if connection.is_connected():
        print("Connected to MySQL database")
        query = "SELECT * FROM customer"
        df = pd.read_sql(query, connection)
        print(df)

except Error as e:
    print("Error while connecting to MySQL", e)

finally:
    if connection.is_connected():
        connection.close()
        print("MySQL connection is closed")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

#df = pd.read_csv('https://raw.githubusercontent.com/Joshua-Quinonez/Mall-E-commerce-data/main/Mall_Customers.csv')

###########################################################

x = df[['Spending_Score', 'Age']] # Specifies columns from the dataframe
model = KMeans(n_clusters=3) # Sets Kmeans as our model
model.fit(x) # Predicts center of clusters
wclust = model.predict(x) # Assigns each point to a cluster
clusters = np.unique(wclust) # Counts the amount of clusters we have

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0] # Finds indices of points in current cluster
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1]) # Plots points in current cluster
  plt.xlabel("Spending Score")
  plt.ylabel("Age")
  plt.title("Age vs Spending Score")
plt.show()

###########################################################

x = df[['Annual_Income', 'Spending_Score']]
model = KMeans(n_clusters=5)
model.fit(x)
wclust = model.predict(x)
clusters = np.unique(wclust)

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0]
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1])
  plt.xlabel("Annual Income ($k)")
  plt.ylabel("Spending Score")
  plt.title("Spending Score vs Annual Income")
plt.show()
###########################################################

###########################################################
df_male = df[df['Gender'] == 'Male']
df_female = df[df['Gender'] == 'Female']

x = df_male[['Annual_Income', 'Spending_Score']]
model = KMeans(n_clusters=5)
model.fit(x)
wclust = model.predict(x)
clusters = np.unique(wclust)

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0]
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1])
  plt.title("Male Spending Score vs Annual Income")
plt.show()
###########################################################

x = df_female[['Annual_Income', 'Spending_Score']]
model = KMeans(n_clusters=5)
model.fit(x)
wclust = model.predict(x)
clusters = np.unique(wclust)

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0]
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1])
  plt.title("Female Spending Score vs Annual Income")
plt.show()
###########################################################

x = df_male[['Spending_Score', 'Age']]
model = KMeans(n_clusters=3)
model.fit(x)
wclust = model.predict(x)
clusters = np.unique(wclust)

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0]
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1])
  plt.xlabel("Spending Score")
  plt.ylabel("Age")
  plt.title("Male Age vs Spending Score")
plt.show()
###########################################################

x = df_female[['Spending_Score', 'Age']]
model = KMeans(n_clusters=3)
model.fit(x)
wclust = model.predict(x)
clusters = np.unique(wclust)

for cluster in clusters:
  row_ix = np.where(wclust == cluster)[0]
  plt.scatter(x.iloc[row_ix, 0], x.iloc[row_ix, 1])
  plt.xlabel("Spending Score")
  plt.ylabel("Age")
  plt.title("Female Age vs Spending Score")
plt.show()

###########################################################